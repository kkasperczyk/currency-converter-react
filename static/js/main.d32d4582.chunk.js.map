{"version":3,"sources":["Container/index.js","Header/index.js","Footer/index.js","Main/index.js","Form/index.js","Result/index.js","Clock/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","children","className","Header","title","Footer","Main","Form","calculateResult","setResult","useState","amount","setAmount","convertFrom","setConvertFrom","convertTo","setConvertTo","onSubmit","event","preventDefault","onReset","type","name","min","step","required","autoFocus","placeholder","value","onChange","target","Result","result","readOnly","Clock","Date","date","setDate","useEffect","intervalId","setInterval","clearInterval","toLocaleString","undefined","weekday","hour","minute","second","day","month","formatDate","App","plnValue","eurRate","usdRate","gbpRate","chfRate","toFixed","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d32d4582.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Container = ({ children }) => (\r\n    <div className=\"container\">\r\n        {children}\r\n    </div>\r\n);\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Header = ({ title }) => (\r\n  <header className=\"header\">\r\n    <h1 className=\"header__title\">{title}</h1>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Footer = ({ title }) => (\r\n  <footer className=\"footer\">\r\n    <span>{title}</span>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Main = ({ children }) => (\r\n    <main className=\"main\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Main;","import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ calculateResult, setResult }) => {\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [convertFrom, setConvertFrom] = useState(\"PLN\");\r\n  const [convertTo, setConvertTo] = useState(\"EUR\");\r\n\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n    calculateResult(convertFrom, convertTo, amount);\r\n  };\r\n\r\n  const onFormReset = (event) => {\r\n    event.preventDefault();\r\n    setAmount(\"\");\r\n    setConvertFrom(\"PLN\");\r\n    setConvertTo(\"EUR\");\r\n    setResult(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onFormSubmit} onReset={onFormReset} className=\"form\">\r\n      <p>\r\n        <label>\r\n          <span className=\"form__labelText\">Amount:</span>\r\n          <input\r\n            className=\"form__field form__field--bigger form__amount\"\r\n            type=\"number\"\r\n            name=\"amount\"\r\n            min=\"1\"\r\n            step=\"any\"\r\n            required\r\n            autoFocus\r\n            placeholder=\"Enter amount\"\r\n            value={amount}\r\n            onChange={({ target }) => setAmount(target.value)}\r\n          />\r\n        </label>\r\n      </p>\r\n      <p>\r\n        <label>\r\n          <span className=\"form__labelText\">From:</span>\r\n          <select\r\n            value={convertFrom}\r\n            onChange={({ target }) => setConvertFrom(target.value)}\r\n            className=\"form__field\"\r\n            required\r\n          >\r\n            <option>PLN</option>\r\n            <option>USD</option>\r\n            <option>GBP</option>\r\n            <option>EUR</option>\r\n            <option>CHF</option>\r\n          </select>\r\n        </label>\r\n      </p>\r\n      <p>\r\n        <label>\r\n          <span className=\"form__labelText\">To:</span>\r\n          <select\r\n            value={convertTo}\r\n            onChange={({ target }) => setConvertTo(target.value)}\r\n            className=\"form__field\"\r\n            required\r\n          >\r\n            <option>PLN</option>\r\n            <option>USD</option>\r\n            <option>GBP</option>\r\n            <option>EUR</option>\r\n            <option>CHF</option>\r\n          </select>\r\n        </label>\r\n      </p>\r\n      <div className=\"form__buttons\">\r\n        <p>\r\n          <button className=\"form__button\">Convert</button>\r\n        </p>\r\n        <p>\r\n          <button className=\"form__button\" type=\"reset\">\r\n            Reset\r\n          </button>\r\n        </p>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Result = ({ result }) => (\r\n  <p>\r\n    <label>\r\n      <span className=\"form__labelText\">Result:</span>\r\n      <input\r\n        className=\"form__field form__field--bigger\"\r\n        type=\"number\"\r\n        readOnly\r\n        value={result}\r\n      />\r\n    </label>\r\n  </p>\r\n);\r\n\r\nexport default Result;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst formatDate = (date) =>\r\n  date.toLocaleString(undefined, {\r\n    weekday: \"long\",\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    second: \"2-digit\",\r\n    day: \"numeric\",\r\n    month: \"long\",\r\n  });\r\n\r\nconst Clock = () => {\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setDate(new Date());\r\n    }, 1000);\r\n\r\n    return () => {\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  return <div className=\"clock\">Dzisiaj jest {formatDate(date)}</div>;\r\n};\r\n\r\nexport default Clock;\r\n","import React, { useState } from \"react\";\nimport Container from \"./Container\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Main from \"./Main\";\nimport Form from \"./Form\";\nimport Result from \"./Result\";\nimport Clock from \"./Clock\";\n\nfunction App() {\n  const [result, setResult] = useState(\"\");\n\n  const calculateResult = (convertFrom, convertTo, amount) => {\n    let plnValue;\n    let result;\n\n    const rates = {\n      eurRate: 4.4278,\n      usdRate: 3.9058,\n      gbpRate: 4.9384,\n      chfRate: 4.1187,\n    };\n\n    const { eurRate, usdRate, gbpRate, chfRate } = rates;\n    // eslint-disable-next-line default-case\n    switch (convertFrom) {\n      case \"PLN\":\n        plnValue = +amount;\n        break;\n      case \"EUR\":\n        plnValue = amount * eurRate;\n        break;\n      case \"USD\":\n        plnValue = amount * usdRate;\n        break;\n      case \"GBP\":\n        plnValue = amount * gbpRate;\n        break;\n      case \"CHF\":\n        plnValue = amount * chfRate;\n        break;\n    }\n\n    // eslint-disable-next-line default-case\n    switch (convertTo) {\n      case \"PLN\":\n        result = plnValue;\n        break;\n      case \"EUR\":\n        result = plnValue / eurRate;\n        break;\n      case \"USD\":\n        result = plnValue / usdRate;\n        break;\n      case \"GBP\":\n        result = plnValue / gbpRate;\n        break;\n      case \"CHF\":\n        result = plnValue / chfRate;\n        break;\n    }\n\n    setResult(`${result.toFixed(2)}`);\n  };\n\n  return (\n    <Container>\n      <Header title=\"currency converter\" />\n      <Main>\n        <Clock />\n        <Form calculateResult={calculateResult} setResult={setResult} />\n        <Result result={result} />\n      </Main>\n      <Footer title=\"Copyright Konrad Kasperczyk 2020 All Rights Reserved\" />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}